<h1>Movies</h1>

<table id="movies-table" class="movies-table">
  <thead>
    <tr>
      <th><a href="#" class="sort-link" data-column="title">Title</a></th>
      <th><a href="#" class="sort-link" data-column="rating">Rating</a></th>
      <th><a href="#" class="sort-link" data-column="release_date">Release Date</a></th>
      <th>Action</th>
    </tr>
  </thead>
  <tbody>
    <% @movies.each do |movie| %>
      <tr>
        <td><%= movie.title %></td>
        <td><%= movie.rating %></td>
        <td><%= movie.release_date %></td>
        <td><%= link_to "Show this movie", movie, class: "show-movie-link" %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= link_to "New movie", new_movie_path, class: "new-movie-link" %>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const table = document.getElementById("movies-table");

  // Function to sort the table
  function sortTable(table, column, order) {
    const tbody = table.querySelector("tbody");
    const rows = Array.from(tbody.querySelectorAll("tr"));

    const sortedRows = rows.sort((a, b) => {
      const aValue = a.querySelector(`td:nth-child(${getIndex(table, column) + 1})`).textContent;
      const bValue = b.querySelector(`td:nth-child(${getIndex(table, column) + 1})`).textContent;
      
      if (!isNaN(aValue) && !isNaN(bValue)) {
        return order === "asc" ? aValue - bValue : bValue - aValue;
      } else {
        return order === "asc" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
      }
    });

    tbody.innerHTML = '';
    sortedRows.forEach(row => tbody.appendChild(row));
  }

  // Function to get the index of the column
  function getIndex(table, column) {
    const headers = table.querySelectorAll("th");
    for (let i = 0; i < headers.length; i++) {
      if (headers[i].querySelector(".sort-link").getAttribute("data-column") === column) {
        return i;
      }
    }
    return -1;
  }

  // Event listener for column headers
  table.addEventListener("click", function(event) {
    const target = event.target;
    if (target.classList.contains("sort-link")) {
      const column = target.getAttribute("data-column");
      const currentOrder = target.classList.contains("asc") ? "desc" : "asc";

      // Remove sorting classes from all other headers
      table.querySelectorAll(".sort-link").forEach(header => {
        if (header !== target) {
          header.classList.remove("asc", "desc");
        }
      });

      // Add sorting class to the clicked header
      target.classList.add(currentOrder);

      // Call a function to sort the table
      sortTable(table, column, currentOrder);
    }
  });

  // Apply sorting if sorting preferences exist in session storage
  const storedColumn = sessionStorage.getItem('sortColumn');
  const storedOrder = sessionStorage.getItem('sortOrder');
  if (storedColumn && storedOrder) {
    const header = table.querySelector(`.sort-link[data-column="${storedColumn}"]`);
    header.classList.add(storedOrder);
    sortTable(table, storedColumn, storedOrder);
  }
});
</script>
